// Code generated by Kitex v0.9.1. DO NOT EDIT.

package productservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	product "github.com/czczcz831/tiktok-mall/client/product/kitex_gen/product"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateProduct": kitex.NewMethodInfo(
		createProductHandler,
		newProductServiceCreateProductArgs,
		newProductServiceCreateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateProduct": kitex.NewMethodInfo(
		updateProductHandler,
		newProductServiceUpdateProductArgs,
		newProductServiceUpdateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteProduct": kitex.NewMethodInfo(
		deleteProductHandler,
		newProductServiceDeleteProductArgs,
		newProductServiceDeleteProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetProduct": kitex.NewMethodInfo(
		getProductHandler,
		newProductServiceGetProductArgs,
		newProductServiceGetProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetProductList": kitex.NewMethodInfo(
		getProductListHandler,
		newProductServiceGetProductListArgs,
		newProductServiceGetProductListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PreDecrStock": kitex.NewMethodInfo(
		preDecrStockHandler,
		newProductServicePreDecrStockArgs,
		newProductServicePreDecrStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChargeStock": kitex.NewMethodInfo(
		chargeStockHandler,
		newProductServiceChargeStockArgs,
		newProductServiceChargeStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	productServiceServiceInfo                = NewServiceInfo()
	productServiceServiceInfoForClient       = NewServiceInfoForClient()
	productServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceCreateProductArgs)
	realResult := result.(*product.ProductServiceCreateProductResult)
	success, err := handler.(product.ProductService).CreateProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceCreateProductArgs() interface{} {
	return product.NewProductServiceCreateProductArgs()
}

func newProductServiceCreateProductResult() interface{} {
	return product.NewProductServiceCreateProductResult()
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceUpdateProductArgs)
	realResult := result.(*product.ProductServiceUpdateProductResult)
	success, err := handler.(product.ProductService).UpdateProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceUpdateProductArgs() interface{} {
	return product.NewProductServiceUpdateProductArgs()
}

func newProductServiceUpdateProductResult() interface{} {
	return product.NewProductServiceUpdateProductResult()
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceDeleteProductArgs)
	realResult := result.(*product.ProductServiceDeleteProductResult)
	success, err := handler.(product.ProductService).DeleteProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceDeleteProductArgs() interface{} {
	return product.NewProductServiceDeleteProductArgs()
}

func newProductServiceDeleteProductResult() interface{} {
	return product.NewProductServiceDeleteProductResult()
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductArgs)
	realResult := result.(*product.ProductServiceGetProductResult)
	success, err := handler.(product.ProductService).GetProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductArgs() interface{} {
	return product.NewProductServiceGetProductArgs()
}

func newProductServiceGetProductResult() interface{} {
	return product.NewProductServiceGetProductResult()
}

func getProductListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceGetProductListArgs)
	realResult := result.(*product.ProductServiceGetProductListResult)
	success, err := handler.(product.ProductService).GetProductList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceGetProductListArgs() interface{} {
	return product.NewProductServiceGetProductListArgs()
}

func newProductServiceGetProductListResult() interface{} {
	return product.NewProductServiceGetProductListResult()
}

func preDecrStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServicePreDecrStockArgs)
	realResult := result.(*product.ProductServicePreDecrStockResult)
	success, err := handler.(product.ProductService).PreDecrStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServicePreDecrStockArgs() interface{} {
	return product.NewProductServicePreDecrStockArgs()
}

func newProductServicePreDecrStockResult() interface{} {
	return product.NewProductServicePreDecrStockResult()
}

func chargeStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductServiceChargeStockArgs)
	realResult := result.(*product.ProductServiceChargeStockResult)
	success, err := handler.(product.ProductService).ChargeStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductServiceChargeStockArgs() interface{} {
	return product.NewProductServiceChargeStockArgs()
}

func newProductServiceChargeStockResult() interface{} {
	return product.NewProductServiceChargeStockResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateProduct(ctx context.Context, req *product.CreateProductReq) (r *product.CreateProductResp, err error) {
	var _args product.ProductServiceCreateProductArgs
	_args.Req = req
	var _result product.ProductServiceCreateProductResult
	if err = p.c.Call(ctx, "CreateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, req *product.UpdateProductReq) (r *product.UpdateProductResp, err error) {
	var _args product.ProductServiceUpdateProductArgs
	_args.Req = req
	var _result product.ProductServiceUpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, req *product.DeleteProductReq) (r *product.DeleteProductResp, err error) {
	var _args product.ProductServiceDeleteProductArgs
	_args.Req = req
	var _result product.ProductServiceDeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, req *product.GetProductReq) (r *product.GetProductResp, err error) {
	var _args product.ProductServiceGetProductArgs
	_args.Req = req
	var _result product.ProductServiceGetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductList(ctx context.Context, req *product.GetProductListReq) (r *product.GetProductListResp, err error) {
	var _args product.ProductServiceGetProductListArgs
	_args.Req = req
	var _result product.ProductServiceGetProductListResult
	if err = p.c.Call(ctx, "GetProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PreDecrStock(ctx context.Context, req *product.PreDecrStockReq) (r *product.PreDecrStockResp, err error) {
	var _args product.ProductServicePreDecrStockArgs
	_args.Req = req
	var _result product.ProductServicePreDecrStockResult
	if err = p.c.Call(ctx, "PreDecrStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChargeStock(ctx context.Context, req *product.ChargeStockReq) (r *product.ChargeStockResp, err error) {
	var _args product.ProductServiceChargeStockArgs
	_args.Req = req
	var _result product.ProductServiceChargeStockResult
	if err = p.c.Call(ctx, "ChargeStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
