// Code generated by thriftgo (0.3.7). DO NOT EDIT.

package checkout

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Address struct {
	Uuid          string `thrift:"uuid,1" frugal:"1,default,string" json:"uuid"`
	UserUuid      string `thrift:"user_uuid,2" frugal:"2,default,string" json:"user_uuid"`
	StreetAddress string `thrift:"street_address,3" frugal:"3,default,string" json:"street_address"`
	City          string `thrift:"city,4" frugal:"4,default,string" json:"city"`
	State         string `thrift:"state,5" frugal:"5,default,string" json:"state"`
	Country       string `thrift:"country,6" frugal:"6,default,string" json:"country"`
	ZipCode       int64  `thrift:"zip_code,7" frugal:"7,default,i64" json:"zip_code"`
}

func NewAddress() *Address {
	return &Address{}
}

func (p *Address) InitDefault() {
	*p = Address{}
}

func (p *Address) GetUuid() (v string) {
	return p.Uuid
}

func (p *Address) GetUserUuid() (v string) {
	return p.UserUuid
}

func (p *Address) GetStreetAddress() (v string) {
	return p.StreetAddress
}

func (p *Address) GetCity() (v string) {
	return p.City
}

func (p *Address) GetState() (v string) {
	return p.State
}

func (p *Address) GetCountry() (v string) {
	return p.Country
}

func (p *Address) GetZipCode() (v int64) {
	return p.ZipCode
}
func (p *Address) SetUuid(val string) {
	p.Uuid = val
}
func (p *Address) SetUserUuid(val string) {
	p.UserUuid = val
}
func (p *Address) SetStreetAddress(val string) {
	p.StreetAddress = val
}
func (p *Address) SetCity(val string) {
	p.City = val
}
func (p *Address) SetState(val string) {
	p.State = val
}
func (p *Address) SetCountry(val string) {
	p.Country = val
}
func (p *Address) SetZipCode(val int64) {
	p.ZipCode = val
}

var fieldIDToName_Address = map[int16]string{
	1: "uuid",
	2: "user_uuid",
	3: "street_address",
	4: "city",
	5: "state",
	6: "country",
	7: "zip_code",
}

func (p *Address) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Address[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Address) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uuid = v
	}
	return nil
}
func (p *Address) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserUuid = v
	}
	return nil
}
func (p *Address) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StreetAddress = v
	}
	return nil
}
func (p *Address) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.City = v
	}
	return nil
}
func (p *Address) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.State = v
	}
	return nil
}
func (p *Address) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Country = v
	}
	return nil
}
func (p *Address) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ZipCode = v
	}
	return nil
}

func (p *Address) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Address"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Address) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_uuid", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Address) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("street_address", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StreetAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Address) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.City); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Address) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("state", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Address) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("country", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Country); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Address) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("zip_code", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ZipCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)

}

func (p *Address) DeepEqual(ano *Address) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uuid) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserUuid) {
		return false
	}
	if !p.Field3DeepEqual(ano.StreetAddress) {
		return false
	}
	if !p.Field4DeepEqual(ano.City) {
		return false
	}
	if !p.Field5DeepEqual(ano.State) {
		return false
	}
	if !p.Field6DeepEqual(ano.Country) {
		return false
	}
	if !p.Field7DeepEqual(ano.ZipCode) {
		return false
	}
	return true
}

func (p *Address) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Uuid, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserUuid, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field3DeepEqual(src string) bool {

	if strings.Compare(p.StreetAddress, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field4DeepEqual(src string) bool {

	if strings.Compare(p.City, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field5DeepEqual(src string) bool {

	if strings.Compare(p.State, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Country, src) != 0 {
		return false
	}
	return true
}
func (p *Address) Field7DeepEqual(src int64) bool {

	if p.ZipCode != src {
		return false
	}
	return true
}

type OrderItem struct {
	ProductUuid string `thrift:"product_uuid,1" frugal:"1,default,string" json:"product_uuid"`
	Quantity    int64  `thrift:"quantity,2" frugal:"2,default,i64" json:"quantity"`
}

func NewOrderItem() *OrderItem {
	return &OrderItem{}
}

func (p *OrderItem) InitDefault() {
	*p = OrderItem{}
}

func (p *OrderItem) GetProductUuid() (v string) {
	return p.ProductUuid
}

func (p *OrderItem) GetQuantity() (v int64) {
	return p.Quantity
}
func (p *OrderItem) SetProductUuid(val string) {
	p.ProductUuid = val
}
func (p *OrderItem) SetQuantity(val int64) {
	p.Quantity = val
}

var fieldIDToName_OrderItem = map[int16]string{
	1: "product_uuid",
	2: "quantity",
}

func (p *OrderItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OrderItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OrderItem) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProductUuid = v
	}
	return nil
}
func (p *OrderItem) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Quantity = v
	}
	return nil
}

func (p *OrderItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OrderItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OrderItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("product_uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProductUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OrderItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("quantity", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Quantity); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OrderItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderItem(%+v)", *p)

}

func (p *OrderItem) DeepEqual(ano *OrderItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProductUuid) {
		return false
	}
	if !p.Field2DeepEqual(ano.Quantity) {
		return false
	}
	return true
}

func (p *OrderItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ProductUuid, src) != 0 {
		return false
	}
	return true
}
func (p *OrderItem) Field2DeepEqual(src int64) bool {

	if p.Quantity != src {
		return false
	}
	return true
}

type CreateAddressReq struct {
	UserUuid      string `thrift:"user_uuid,1" frugal:"1,default,string" json:"user_uuid"`
	StreetAddress string `thrift:"street_address,2" frugal:"2,default,string" json:"street_address"`
	City          string `thrift:"city,3" frugal:"3,default,string" json:"city"`
	State         string `thrift:"state,4" frugal:"4,default,string" json:"state"`
	Country       string `thrift:"country,5" frugal:"5,default,string" json:"country"`
	ZipCode       int64  `thrift:"zip_code,6" frugal:"6,default,i64" json:"zip_code"`
}

func NewCreateAddressReq() *CreateAddressReq {
	return &CreateAddressReq{}
}

func (p *CreateAddressReq) InitDefault() {
	*p = CreateAddressReq{}
}

func (p *CreateAddressReq) GetUserUuid() (v string) {
	return p.UserUuid
}

func (p *CreateAddressReq) GetStreetAddress() (v string) {
	return p.StreetAddress
}

func (p *CreateAddressReq) GetCity() (v string) {
	return p.City
}

func (p *CreateAddressReq) GetState() (v string) {
	return p.State
}

func (p *CreateAddressReq) GetCountry() (v string) {
	return p.Country
}

func (p *CreateAddressReq) GetZipCode() (v int64) {
	return p.ZipCode
}
func (p *CreateAddressReq) SetUserUuid(val string) {
	p.UserUuid = val
}
func (p *CreateAddressReq) SetStreetAddress(val string) {
	p.StreetAddress = val
}
func (p *CreateAddressReq) SetCity(val string) {
	p.City = val
}
func (p *CreateAddressReq) SetState(val string) {
	p.State = val
}
func (p *CreateAddressReq) SetCountry(val string) {
	p.Country = val
}
func (p *CreateAddressReq) SetZipCode(val int64) {
	p.ZipCode = val
}

var fieldIDToName_CreateAddressReq = map[int16]string{
	1: "user_uuid",
	2: "street_address",
	3: "city",
	4: "state",
	5: "country",
	6: "zip_code",
}

func (p *CreateAddressReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateAddressReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateAddressReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserUuid = v
	}
	return nil
}
func (p *CreateAddressReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StreetAddress = v
	}
	return nil
}
func (p *CreateAddressReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.City = v
	}
	return nil
}
func (p *CreateAddressReq) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.State = v
	}
	return nil
}
func (p *CreateAddressReq) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Country = v
	}
	return nil
}
func (p *CreateAddressReq) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ZipCode = v
	}
	return nil
}

func (p *CreateAddressReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAddressReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateAddressReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateAddressReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("street_address", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StreetAddress); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CreateAddressReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.City); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CreateAddressReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("state", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.State); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CreateAddressReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("country", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Country); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateAddressReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("zip_code", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ZipCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CreateAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAddressReq(%+v)", *p)

}

func (p *CreateAddressReq) DeepEqual(ano *CreateAddressReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserUuid) {
		return false
	}
	if !p.Field2DeepEqual(ano.StreetAddress) {
		return false
	}
	if !p.Field3DeepEqual(ano.City) {
		return false
	}
	if !p.Field4DeepEqual(ano.State) {
		return false
	}
	if !p.Field5DeepEqual(ano.Country) {
		return false
	}
	if !p.Field6DeepEqual(ano.ZipCode) {
		return false
	}
	return true
}

func (p *CreateAddressReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserUuid, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAddressReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.StreetAddress, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAddressReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.City, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAddressReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.State, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAddressReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Country, src) != 0 {
		return false
	}
	return true
}
func (p *CreateAddressReq) Field6DeepEqual(src int64) bool {

	if p.ZipCode != src {
		return false
	}
	return true
}

type CreateAddressResp struct {
	Address *Address `thrift:"address,1" frugal:"1,default,Address" json:"address"`
}

func NewCreateAddressResp() *CreateAddressResp {
	return &CreateAddressResp{}
}

func (p *CreateAddressResp) InitDefault() {
	*p = CreateAddressResp{}
}

var CreateAddressResp_Address_DEFAULT *Address

func (p *CreateAddressResp) GetAddress() (v *Address) {
	if !p.IsSetAddress() {
		return CreateAddressResp_Address_DEFAULT
	}
	return p.Address
}
func (p *CreateAddressResp) SetAddress(val *Address) {
	p.Address = val
}

var fieldIDToName_CreateAddressResp = map[int16]string{
	1: "address",
}

func (p *CreateAddressResp) IsSetAddress() bool {
	return p.Address != nil
}

func (p *CreateAddressResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateAddressResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateAddressResp) ReadField1(iprot thrift.TProtocol) error {
	p.Address = NewAddress()
	if err := p.Address.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateAddressResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAddressResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateAddressResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Address.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateAddressResp(%+v)", *p)

}

func (p *CreateAddressResp) DeepEqual(ano *CreateAddressResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Address) {
		return false
	}
	return true
}

func (p *CreateAddressResp) Field1DeepEqual(src *Address) bool {

	if !p.Address.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateAddressReq struct {
	Address *Address `thrift:"address,1" frugal:"1,default,Address" json:"address"`
}

func NewUpdateAddressReq() *UpdateAddressReq {
	return &UpdateAddressReq{}
}

func (p *UpdateAddressReq) InitDefault() {
	*p = UpdateAddressReq{}
}

var UpdateAddressReq_Address_DEFAULT *Address

func (p *UpdateAddressReq) GetAddress() (v *Address) {
	if !p.IsSetAddress() {
		return UpdateAddressReq_Address_DEFAULT
	}
	return p.Address
}
func (p *UpdateAddressReq) SetAddress(val *Address) {
	p.Address = val
}

var fieldIDToName_UpdateAddressReq = map[int16]string{
	1: "address",
}

func (p *UpdateAddressReq) IsSetAddress() bool {
	return p.Address != nil
}

func (p *UpdateAddressReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateAddressReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateAddressReq) ReadField1(iprot thrift.TProtocol) error {
	p.Address = NewAddress()
	if err := p.Address.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateAddressReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAddressReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateAddressReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Address.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateAddressReq(%+v)", *p)

}

func (p *UpdateAddressReq) DeepEqual(ano *UpdateAddressReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Address) {
		return false
	}
	return true
}

func (p *UpdateAddressReq) Field1DeepEqual(src *Address) bool {

	if !p.Address.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateAddressResp struct {
	Address *Address `thrift:"address,1" frugal:"1,default,Address" json:"address"`
}

func NewUpdateAddressResp() *UpdateAddressResp {
	return &UpdateAddressResp{}
}

func (p *UpdateAddressResp) InitDefault() {
	*p = UpdateAddressResp{}
}

var UpdateAddressResp_Address_DEFAULT *Address

func (p *UpdateAddressResp) GetAddress() (v *Address) {
	if !p.IsSetAddress() {
		return UpdateAddressResp_Address_DEFAULT
	}
	return p.Address
}
func (p *UpdateAddressResp) SetAddress(val *Address) {
	p.Address = val
}

var fieldIDToName_UpdateAddressResp = map[int16]string{
	1: "address",
}

func (p *UpdateAddressResp) IsSetAddress() bool {
	return p.Address != nil
}

func (p *UpdateAddressResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateAddressResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateAddressResp) ReadField1(iprot thrift.TProtocol) error {
	p.Address = NewAddress()
	if err := p.Address.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateAddressResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAddressResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateAddressResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Address.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateAddressResp(%+v)", *p)

}

func (p *UpdateAddressResp) DeepEqual(ano *UpdateAddressResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Address) {
		return false
	}
	return true
}

func (p *UpdateAddressResp) Field1DeepEqual(src *Address) bool {

	if !p.Address.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteAddressReq struct {
	Uuid     string `thrift:"uuid,1" frugal:"1,default,string" json:"uuid"`
	UserUuid string `thrift:"user_uuid,2" frugal:"2,default,string" json:"user_uuid"`
}

func NewDeleteAddressReq() *DeleteAddressReq {
	return &DeleteAddressReq{}
}

func (p *DeleteAddressReq) InitDefault() {
	*p = DeleteAddressReq{}
}

func (p *DeleteAddressReq) GetUuid() (v string) {
	return p.Uuid
}

func (p *DeleteAddressReq) GetUserUuid() (v string) {
	return p.UserUuid
}
func (p *DeleteAddressReq) SetUuid(val string) {
	p.Uuid = val
}
func (p *DeleteAddressReq) SetUserUuid(val string) {
	p.UserUuid = val
}

var fieldIDToName_DeleteAddressReq = map[int16]string{
	1: "uuid",
	2: "user_uuid",
}

func (p *DeleteAddressReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteAddressReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteAddressReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uuid = v
	}
	return nil
}
func (p *DeleteAddressReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserUuid = v
	}
	return nil
}

func (p *DeleteAddressReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAddressReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteAddressReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteAddressReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_uuid", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAddressReq(%+v)", *p)

}

func (p *DeleteAddressReq) DeepEqual(ano *DeleteAddressReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uuid) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserUuid) {
		return false
	}
	return true
}

func (p *DeleteAddressReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Uuid, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteAddressReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserUuid, src) != 0 {
		return false
	}
	return true
}

type DeleteAddressResp struct {
	Uuid string `thrift:"uuid,1" frugal:"1,default,string" json:"uuid"`
}

func NewDeleteAddressResp() *DeleteAddressResp {
	return &DeleteAddressResp{}
}

func (p *DeleteAddressResp) InitDefault() {
	*p = DeleteAddressResp{}
}

func (p *DeleteAddressResp) GetUuid() (v string) {
	return p.Uuid
}
func (p *DeleteAddressResp) SetUuid(val string) {
	p.Uuid = val
}

var fieldIDToName_DeleteAddressResp = map[int16]string{
	1: "uuid",
}

func (p *DeleteAddressResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteAddressResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteAddressResp) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uuid = v
	}
	return nil
}

func (p *DeleteAddressResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAddressResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteAddressResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAddressResp(%+v)", *p)

}

func (p *DeleteAddressResp) DeepEqual(ano *DeleteAddressResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Uuid) {
		return false
	}
	return true
}

func (p *DeleteAddressResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Uuid, src) != 0 {
		return false
	}
	return true
}

type GetAddressReq struct {
	UserUuid string `thrift:"user_uuid,1" frugal:"1,default,string" json:"user_uuid"`
}

func NewGetAddressReq() *GetAddressReq {
	return &GetAddressReq{}
}

func (p *GetAddressReq) InitDefault() {
	*p = GetAddressReq{}
}

func (p *GetAddressReq) GetUserUuid() (v string) {
	return p.UserUuid
}
func (p *GetAddressReq) SetUserUuid(val string) {
	p.UserUuid = val
}

var fieldIDToName_GetAddressReq = map[int16]string{
	1: "user_uuid",
}

func (p *GetAddressReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAddressReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAddressReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserUuid = v
	}
	return nil
}

func (p *GetAddressReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAddressReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAddressReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAddressReq(%+v)", *p)

}

func (p *GetAddressReq) DeepEqual(ano *GetAddressReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserUuid) {
		return false
	}
	return true
}

func (p *GetAddressReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserUuid, src) != 0 {
		return false
	}
	return true
}

type GetAddressResp struct {
	Addresses []*Address `thrift:"addresses,1" frugal:"1,default,list<Address>" json:"addresses"`
}

func NewGetAddressResp() *GetAddressResp {
	return &GetAddressResp{}
}

func (p *GetAddressResp) InitDefault() {
	*p = GetAddressResp{}
}

func (p *GetAddressResp) GetAddresses() (v []*Address) {
	return p.Addresses
}
func (p *GetAddressResp) SetAddresses(val []*Address) {
	p.Addresses = val
}

var fieldIDToName_GetAddressResp = map[int16]string{
	1: "addresses",
}

func (p *GetAddressResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAddressResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAddressResp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Addresses = make([]*Address, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewAddress()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Addresses = append(p.Addresses, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetAddressResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAddressResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAddressResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("addresses", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Addresses)); err != nil {
		return err
	}
	for _, v := range p.Addresses {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAddressResp(%+v)", *p)

}

func (p *GetAddressResp) DeepEqual(ano *GetAddressResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Addresses) {
		return false
	}
	return true
}

func (p *GetAddressResp) Field1DeepEqual(src []*Address) bool {

	if len(p.Addresses) != len(src) {
		return false
	}
	for i, v := range p.Addresses {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CheckoutReq struct {
	UserUuid    string       `thrift:"user_uuid,1" frugal:"1,default,string" json:"user_uuid"`
	FirstName   string       `thrift:"first_name,2" frugal:"2,default,string" json:"first_name"`
	LastName    string       `thrift:"last_name,3" frugal:"3,default,string" json:"last_name"`
	Email       string       `thrift:"email,4" frugal:"4,default,string" json:"email"`
	AddressUuid string       `thrift:"address_uuid,5" frugal:"5,default,string" json:"address_uuid"`
	Items       []*OrderItem `thrift:"items,6" frugal:"6,default,list<OrderItem>" json:"items"`
}

func NewCheckoutReq() *CheckoutReq {
	return &CheckoutReq{}
}

func (p *CheckoutReq) InitDefault() {
	*p = CheckoutReq{}
}

func (p *CheckoutReq) GetUserUuid() (v string) {
	return p.UserUuid
}

func (p *CheckoutReq) GetFirstName() (v string) {
	return p.FirstName
}

func (p *CheckoutReq) GetLastName() (v string) {
	return p.LastName
}

func (p *CheckoutReq) GetEmail() (v string) {
	return p.Email
}

func (p *CheckoutReq) GetAddressUuid() (v string) {
	return p.AddressUuid
}

func (p *CheckoutReq) GetItems() (v []*OrderItem) {
	return p.Items
}
func (p *CheckoutReq) SetUserUuid(val string) {
	p.UserUuid = val
}
func (p *CheckoutReq) SetFirstName(val string) {
	p.FirstName = val
}
func (p *CheckoutReq) SetLastName(val string) {
	p.LastName = val
}
func (p *CheckoutReq) SetEmail(val string) {
	p.Email = val
}
func (p *CheckoutReq) SetAddressUuid(val string) {
	p.AddressUuid = val
}
func (p *CheckoutReq) SetItems(val []*OrderItem) {
	p.Items = val
}

var fieldIDToName_CheckoutReq = map[int16]string{
	1: "user_uuid",
	2: "first_name",
	3: "last_name",
	4: "email",
	5: "address_uuid",
	6: "items",
}

func (p *CheckoutReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutReq) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserUuid = v
	}
	return nil
}
func (p *CheckoutReq) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FirstName = v
	}
	return nil
}
func (p *CheckoutReq) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastName = v
	}
	return nil
}
func (p *CheckoutReq) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Email = v
	}
	return nil
}
func (p *CheckoutReq) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AddressUuid = v
	}
	return nil
}
func (p *CheckoutReq) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*OrderItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewOrderItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckoutReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("first_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FirstName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CheckoutReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CheckoutReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Email); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CheckoutReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address_uuid", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AddressUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CheckoutReq) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CheckoutReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutReq(%+v)", *p)

}

func (p *CheckoutReq) DeepEqual(ano *CheckoutReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserUuid) {
		return false
	}
	if !p.Field2DeepEqual(ano.FirstName) {
		return false
	}
	if !p.Field3DeepEqual(ano.LastName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Email) {
		return false
	}
	if !p.Field5DeepEqual(ano.AddressUuid) {
		return false
	}
	if !p.Field6DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *CheckoutReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserUuid, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FirstName, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.LastName, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Email, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field5DeepEqual(src string) bool {

	if strings.Compare(p.AddressUuid, src) != 0 {
		return false
	}
	return true
}
func (p *CheckoutReq) Field6DeepEqual(src []*OrderItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CheckoutResp struct {
	OrderUuid string `thrift:"order_uuid,1" frugal:"1,default,string" json:"order_uuid"`
}

func NewCheckoutResp() *CheckoutResp {
	return &CheckoutResp{}
}

func (p *CheckoutResp) InitDefault() {
	*p = CheckoutResp{}
}

func (p *CheckoutResp) GetOrderUuid() (v string) {
	return p.OrderUuid
}
func (p *CheckoutResp) SetOrderUuid(val string) {
	p.OrderUuid = val
}

var fieldIDToName_CheckoutResp = map[int16]string{
	1: "order_uuid",
}

func (p *CheckoutResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutResp) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.OrderUuid = v
	}
	return nil
}

func (p *CheckoutResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckoutResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("order_uuid", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.OrderUuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutResp(%+v)", *p)

}

func (p *CheckoutResp) DeepEqual(ano *CheckoutResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderUuid) {
		return false
	}
	return true
}

func (p *CheckoutResp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.OrderUuid, src) != 0 {
		return false
	}
	return true
}

type CheckoutService interface {
	CreateAddress(ctx context.Context, req *CreateAddressReq) (r *CreateAddressResp, err error)

	UpdateAddress(ctx context.Context, req *UpdateAddressReq) (r *UpdateAddressResp, err error)

	DeleteAddress(ctx context.Context, req *DeleteAddressReq) (r *DeleteAddressResp, err error)

	GetAddress(ctx context.Context, req *GetAddressReq) (r *GetAddressResp, err error)

	Checkout(ctx context.Context, req *CheckoutReq) (r *CheckoutResp, err error)
}

type CheckoutServiceClient struct {
	c thrift.TClient
}

func NewCheckoutServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CheckoutServiceClient {
	return &CheckoutServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCheckoutServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CheckoutServiceClient {
	return &CheckoutServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCheckoutServiceClient(c thrift.TClient) *CheckoutServiceClient {
	return &CheckoutServiceClient{
		c: c,
	}
}

func (p *CheckoutServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CheckoutServiceClient) CreateAddress(ctx context.Context, req *CreateAddressReq) (r *CreateAddressResp, err error) {
	var _args CheckoutServiceCreateAddressArgs
	_args.Req = req
	var _result CheckoutServiceCreateAddressResult
	if err = p.Client_().Call(ctx, "CreateAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CheckoutServiceClient) UpdateAddress(ctx context.Context, req *UpdateAddressReq) (r *UpdateAddressResp, err error) {
	var _args CheckoutServiceUpdateAddressArgs
	_args.Req = req
	var _result CheckoutServiceUpdateAddressResult
	if err = p.Client_().Call(ctx, "UpdateAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CheckoutServiceClient) DeleteAddress(ctx context.Context, req *DeleteAddressReq) (r *DeleteAddressResp, err error) {
	var _args CheckoutServiceDeleteAddressArgs
	_args.Req = req
	var _result CheckoutServiceDeleteAddressResult
	if err = p.Client_().Call(ctx, "DeleteAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CheckoutServiceClient) GetAddress(ctx context.Context, req *GetAddressReq) (r *GetAddressResp, err error) {
	var _args CheckoutServiceGetAddressArgs
	_args.Req = req
	var _result CheckoutServiceGetAddressResult
	if err = p.Client_().Call(ctx, "GetAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CheckoutServiceClient) Checkout(ctx context.Context, req *CheckoutReq) (r *CheckoutResp, err error) {
	var _args CheckoutServiceCheckoutArgs
	_args.Req = req
	var _result CheckoutServiceCheckoutResult
	if err = p.Client_().Call(ctx, "Checkout", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CheckoutServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CheckoutService
}

func (p *CheckoutServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CheckoutServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CheckoutServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCheckoutServiceProcessor(handler CheckoutService) *CheckoutServiceProcessor {
	self := &CheckoutServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateAddress", &checkoutServiceProcessorCreateAddress{handler: handler})
	self.AddToProcessorMap("UpdateAddress", &checkoutServiceProcessorUpdateAddress{handler: handler})
	self.AddToProcessorMap("DeleteAddress", &checkoutServiceProcessorDeleteAddress{handler: handler})
	self.AddToProcessorMap("GetAddress", &checkoutServiceProcessorGetAddress{handler: handler})
	self.AddToProcessorMap("Checkout", &checkoutServiceProcessorCheckout{handler: handler})
	return self
}
func (p *CheckoutServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type checkoutServiceProcessorCreateAddress struct {
	handler CheckoutService
}

func (p *checkoutServiceProcessorCreateAddress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckoutServiceCreateAddressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CheckoutServiceCreateAddressResult{}
	var retval *CreateAddressResp
	if retval, err2 = p.handler.CreateAddress(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateAddress: "+err2.Error())
		oprot.WriteMessageBegin("CreateAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateAddress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type checkoutServiceProcessorUpdateAddress struct {
	handler CheckoutService
}

func (p *checkoutServiceProcessorUpdateAddress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckoutServiceUpdateAddressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CheckoutServiceUpdateAddressResult{}
	var retval *UpdateAddressResp
	if retval, err2 = p.handler.UpdateAddress(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateAddress: "+err2.Error())
		oprot.WriteMessageBegin("UpdateAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateAddress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type checkoutServiceProcessorDeleteAddress struct {
	handler CheckoutService
}

func (p *checkoutServiceProcessorDeleteAddress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckoutServiceDeleteAddressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CheckoutServiceDeleteAddressResult{}
	var retval *DeleteAddressResp
	if retval, err2 = p.handler.DeleteAddress(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteAddress: "+err2.Error())
		oprot.WriteMessageBegin("DeleteAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteAddress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type checkoutServiceProcessorGetAddress struct {
	handler CheckoutService
}

func (p *checkoutServiceProcessorGetAddress) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckoutServiceGetAddressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CheckoutServiceGetAddressResult{}
	var retval *GetAddressResp
	if retval, err2 = p.handler.GetAddress(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAddress: "+err2.Error())
		oprot.WriteMessageBegin("GetAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAddress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type checkoutServiceProcessorCheckout struct {
	handler CheckoutService
}

func (p *checkoutServiceProcessorCheckout) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CheckoutServiceCheckoutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Checkout", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CheckoutServiceCheckoutResult{}
	var retval *CheckoutResp
	if retval, err2 = p.handler.Checkout(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Checkout: "+err2.Error())
		oprot.WriteMessageBegin("Checkout", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Checkout", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CheckoutServiceCreateAddressArgs struct {
	Req *CreateAddressReq `thrift:"req,1" frugal:"1,default,CreateAddressReq" json:"req"`
}

func NewCheckoutServiceCreateAddressArgs() *CheckoutServiceCreateAddressArgs {
	return &CheckoutServiceCreateAddressArgs{}
}

func (p *CheckoutServiceCreateAddressArgs) InitDefault() {
	*p = CheckoutServiceCreateAddressArgs{}
}

var CheckoutServiceCreateAddressArgs_Req_DEFAULT *CreateAddressReq

func (p *CheckoutServiceCreateAddressArgs) GetReq() (v *CreateAddressReq) {
	if !p.IsSetReq() {
		return CheckoutServiceCreateAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CheckoutServiceCreateAddressArgs) SetReq(val *CreateAddressReq) {
	p.Req = val
}

var fieldIDToName_CheckoutServiceCreateAddressArgs = map[int16]string{
	1: "req",
}

func (p *CheckoutServiceCreateAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckoutServiceCreateAddressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceCreateAddressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceCreateAddressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateAddressReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceCreateAddressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAddress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceCreateAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutServiceCreateAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceCreateAddressArgs(%+v)", *p)

}

func (p *CheckoutServiceCreateAddressArgs) DeepEqual(ano *CheckoutServiceCreateAddressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CheckoutServiceCreateAddressArgs) Field1DeepEqual(src *CreateAddressReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceCreateAddressResult struct {
	Success *CreateAddressResp `thrift:"success,0,optional" frugal:"0,optional,CreateAddressResp" json:"success,omitempty"`
}

func NewCheckoutServiceCreateAddressResult() *CheckoutServiceCreateAddressResult {
	return &CheckoutServiceCreateAddressResult{}
}

func (p *CheckoutServiceCreateAddressResult) InitDefault() {
	*p = CheckoutServiceCreateAddressResult{}
}

var CheckoutServiceCreateAddressResult_Success_DEFAULT *CreateAddressResp

func (p *CheckoutServiceCreateAddressResult) GetSuccess() (v *CreateAddressResp) {
	if !p.IsSetSuccess() {
		return CheckoutServiceCreateAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CheckoutServiceCreateAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateAddressResp)
}

var fieldIDToName_CheckoutServiceCreateAddressResult = map[int16]string{
	0: "success",
}

func (p *CheckoutServiceCreateAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckoutServiceCreateAddressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceCreateAddressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceCreateAddressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateAddressResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceCreateAddressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateAddress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceCreateAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CheckoutServiceCreateAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceCreateAddressResult(%+v)", *p)

}

func (p *CheckoutServiceCreateAddressResult) DeepEqual(ano *CheckoutServiceCreateAddressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CheckoutServiceCreateAddressResult) Field0DeepEqual(src *CreateAddressResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceUpdateAddressArgs struct {
	Req *UpdateAddressReq `thrift:"req,1" frugal:"1,default,UpdateAddressReq" json:"req"`
}

func NewCheckoutServiceUpdateAddressArgs() *CheckoutServiceUpdateAddressArgs {
	return &CheckoutServiceUpdateAddressArgs{}
}

func (p *CheckoutServiceUpdateAddressArgs) InitDefault() {
	*p = CheckoutServiceUpdateAddressArgs{}
}

var CheckoutServiceUpdateAddressArgs_Req_DEFAULT *UpdateAddressReq

func (p *CheckoutServiceUpdateAddressArgs) GetReq() (v *UpdateAddressReq) {
	if !p.IsSetReq() {
		return CheckoutServiceUpdateAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CheckoutServiceUpdateAddressArgs) SetReq(val *UpdateAddressReq) {
	p.Req = val
}

var fieldIDToName_CheckoutServiceUpdateAddressArgs = map[int16]string{
	1: "req",
}

func (p *CheckoutServiceUpdateAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckoutServiceUpdateAddressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceUpdateAddressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceUpdateAddressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewUpdateAddressReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceUpdateAddressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAddress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceUpdateAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutServiceUpdateAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceUpdateAddressArgs(%+v)", *p)

}

func (p *CheckoutServiceUpdateAddressArgs) DeepEqual(ano *CheckoutServiceUpdateAddressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CheckoutServiceUpdateAddressArgs) Field1DeepEqual(src *UpdateAddressReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceUpdateAddressResult struct {
	Success *UpdateAddressResp `thrift:"success,0,optional" frugal:"0,optional,UpdateAddressResp" json:"success,omitempty"`
}

func NewCheckoutServiceUpdateAddressResult() *CheckoutServiceUpdateAddressResult {
	return &CheckoutServiceUpdateAddressResult{}
}

func (p *CheckoutServiceUpdateAddressResult) InitDefault() {
	*p = CheckoutServiceUpdateAddressResult{}
}

var CheckoutServiceUpdateAddressResult_Success_DEFAULT *UpdateAddressResp

func (p *CheckoutServiceUpdateAddressResult) GetSuccess() (v *UpdateAddressResp) {
	if !p.IsSetSuccess() {
		return CheckoutServiceUpdateAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CheckoutServiceUpdateAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateAddressResp)
}

var fieldIDToName_CheckoutServiceUpdateAddressResult = map[int16]string{
	0: "success",
}

func (p *CheckoutServiceUpdateAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckoutServiceUpdateAddressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceUpdateAddressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceUpdateAddressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateAddressResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceUpdateAddressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateAddress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceUpdateAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CheckoutServiceUpdateAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceUpdateAddressResult(%+v)", *p)

}

func (p *CheckoutServiceUpdateAddressResult) DeepEqual(ano *CheckoutServiceUpdateAddressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CheckoutServiceUpdateAddressResult) Field0DeepEqual(src *UpdateAddressResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceDeleteAddressArgs struct {
	Req *DeleteAddressReq `thrift:"req,1" frugal:"1,default,DeleteAddressReq" json:"req"`
}

func NewCheckoutServiceDeleteAddressArgs() *CheckoutServiceDeleteAddressArgs {
	return &CheckoutServiceDeleteAddressArgs{}
}

func (p *CheckoutServiceDeleteAddressArgs) InitDefault() {
	*p = CheckoutServiceDeleteAddressArgs{}
}

var CheckoutServiceDeleteAddressArgs_Req_DEFAULT *DeleteAddressReq

func (p *CheckoutServiceDeleteAddressArgs) GetReq() (v *DeleteAddressReq) {
	if !p.IsSetReq() {
		return CheckoutServiceDeleteAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CheckoutServiceDeleteAddressArgs) SetReq(val *DeleteAddressReq) {
	p.Req = val
}

var fieldIDToName_CheckoutServiceDeleteAddressArgs = map[int16]string{
	1: "req",
}

func (p *CheckoutServiceDeleteAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckoutServiceDeleteAddressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceDeleteAddressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceDeleteAddressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDeleteAddressReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceDeleteAddressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAddress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceDeleteAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutServiceDeleteAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceDeleteAddressArgs(%+v)", *p)

}

func (p *CheckoutServiceDeleteAddressArgs) DeepEqual(ano *CheckoutServiceDeleteAddressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CheckoutServiceDeleteAddressArgs) Field1DeepEqual(src *DeleteAddressReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceDeleteAddressResult struct {
	Success *DeleteAddressResp `thrift:"success,0,optional" frugal:"0,optional,DeleteAddressResp" json:"success,omitempty"`
}

func NewCheckoutServiceDeleteAddressResult() *CheckoutServiceDeleteAddressResult {
	return &CheckoutServiceDeleteAddressResult{}
}

func (p *CheckoutServiceDeleteAddressResult) InitDefault() {
	*p = CheckoutServiceDeleteAddressResult{}
}

var CheckoutServiceDeleteAddressResult_Success_DEFAULT *DeleteAddressResp

func (p *CheckoutServiceDeleteAddressResult) GetSuccess() (v *DeleteAddressResp) {
	if !p.IsSetSuccess() {
		return CheckoutServiceDeleteAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CheckoutServiceDeleteAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteAddressResp)
}

var fieldIDToName_CheckoutServiceDeleteAddressResult = map[int16]string{
	0: "success",
}

func (p *CheckoutServiceDeleteAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckoutServiceDeleteAddressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceDeleteAddressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceDeleteAddressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteAddressResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceDeleteAddressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteAddress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceDeleteAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CheckoutServiceDeleteAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceDeleteAddressResult(%+v)", *p)

}

func (p *CheckoutServiceDeleteAddressResult) DeepEqual(ano *CheckoutServiceDeleteAddressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CheckoutServiceDeleteAddressResult) Field0DeepEqual(src *DeleteAddressResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceGetAddressArgs struct {
	Req *GetAddressReq `thrift:"req,1" frugal:"1,default,GetAddressReq" json:"req"`
}

func NewCheckoutServiceGetAddressArgs() *CheckoutServiceGetAddressArgs {
	return &CheckoutServiceGetAddressArgs{}
}

func (p *CheckoutServiceGetAddressArgs) InitDefault() {
	*p = CheckoutServiceGetAddressArgs{}
}

var CheckoutServiceGetAddressArgs_Req_DEFAULT *GetAddressReq

func (p *CheckoutServiceGetAddressArgs) GetReq() (v *GetAddressReq) {
	if !p.IsSetReq() {
		return CheckoutServiceGetAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CheckoutServiceGetAddressArgs) SetReq(val *GetAddressReq) {
	p.Req = val
}

var fieldIDToName_CheckoutServiceGetAddressArgs = map[int16]string{
	1: "req",
}

func (p *CheckoutServiceGetAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckoutServiceGetAddressArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceGetAddressArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceGetAddressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetAddressReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceGetAddressArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAddress_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceGetAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutServiceGetAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceGetAddressArgs(%+v)", *p)

}

func (p *CheckoutServiceGetAddressArgs) DeepEqual(ano *CheckoutServiceGetAddressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CheckoutServiceGetAddressArgs) Field1DeepEqual(src *GetAddressReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceGetAddressResult struct {
	Success *GetAddressResp `thrift:"success,0,optional" frugal:"0,optional,GetAddressResp" json:"success,omitempty"`
}

func NewCheckoutServiceGetAddressResult() *CheckoutServiceGetAddressResult {
	return &CheckoutServiceGetAddressResult{}
}

func (p *CheckoutServiceGetAddressResult) InitDefault() {
	*p = CheckoutServiceGetAddressResult{}
}

var CheckoutServiceGetAddressResult_Success_DEFAULT *GetAddressResp

func (p *CheckoutServiceGetAddressResult) GetSuccess() (v *GetAddressResp) {
	if !p.IsSetSuccess() {
		return CheckoutServiceGetAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CheckoutServiceGetAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAddressResp)
}

var fieldIDToName_CheckoutServiceGetAddressResult = map[int16]string{
	0: "success",
}

func (p *CheckoutServiceGetAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckoutServiceGetAddressResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceGetAddressResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceGetAddressResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetAddressResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceGetAddressResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAddress_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceGetAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CheckoutServiceGetAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceGetAddressResult(%+v)", *p)

}

func (p *CheckoutServiceGetAddressResult) DeepEqual(ano *CheckoutServiceGetAddressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CheckoutServiceGetAddressResult) Field0DeepEqual(src *GetAddressResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceCheckoutArgs struct {
	Req *CheckoutReq `thrift:"req,1" frugal:"1,default,CheckoutReq" json:"req"`
}

func NewCheckoutServiceCheckoutArgs() *CheckoutServiceCheckoutArgs {
	return &CheckoutServiceCheckoutArgs{}
}

func (p *CheckoutServiceCheckoutArgs) InitDefault() {
	*p = CheckoutServiceCheckoutArgs{}
}

var CheckoutServiceCheckoutArgs_Req_DEFAULT *CheckoutReq

func (p *CheckoutServiceCheckoutArgs) GetReq() (v *CheckoutReq) {
	if !p.IsSetReq() {
		return CheckoutServiceCheckoutArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CheckoutServiceCheckoutArgs) SetReq(val *CheckoutReq) {
	p.Req = val
}

var fieldIDToName_CheckoutServiceCheckoutArgs = map[int16]string{
	1: "req",
}

func (p *CheckoutServiceCheckoutArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckoutServiceCheckoutArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceCheckoutArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCheckoutReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceCheckoutArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Checkout_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CheckoutServiceCheckoutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceCheckoutArgs(%+v)", *p)

}

func (p *CheckoutServiceCheckoutArgs) DeepEqual(ano *CheckoutServiceCheckoutArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CheckoutServiceCheckoutArgs) Field1DeepEqual(src *CheckoutReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CheckoutServiceCheckoutResult struct {
	Success *CheckoutResp `thrift:"success,0,optional" frugal:"0,optional,CheckoutResp" json:"success,omitempty"`
}

func NewCheckoutServiceCheckoutResult() *CheckoutServiceCheckoutResult {
	return &CheckoutServiceCheckoutResult{}
}

func (p *CheckoutServiceCheckoutResult) InitDefault() {
	*p = CheckoutServiceCheckoutResult{}
}

var CheckoutServiceCheckoutResult_Success_DEFAULT *CheckoutResp

func (p *CheckoutServiceCheckoutResult) GetSuccess() (v *CheckoutResp) {
	if !p.IsSetSuccess() {
		return CheckoutServiceCheckoutResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CheckoutServiceCheckoutResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckoutResp)
}

var fieldIDToName_CheckoutServiceCheckoutResult = map[int16]string{
	0: "success",
}

func (p *CheckoutServiceCheckoutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckoutServiceCheckoutResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckoutServiceCheckoutResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCheckoutResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CheckoutServiceCheckoutResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Checkout_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckoutServiceCheckoutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CheckoutServiceCheckoutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckoutServiceCheckoutResult(%+v)", *p)

}

func (p *CheckoutServiceCheckoutResult) DeepEqual(ano *CheckoutServiceCheckoutResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CheckoutServiceCheckoutResult) Field0DeepEqual(src *CheckoutResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
