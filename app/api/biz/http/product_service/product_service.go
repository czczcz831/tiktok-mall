// Code generated by hertz generator.

package product_service

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/common/config"
	"github.com/cloudwego/hertz/pkg/protocol"
	api "github.com/czczcz831/tiktok-mall/app/api/hertz_gen/api"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type Client interface {
	CreateProduct(context context.Context, req *api.CreateProductReq, reqOpt ...config.RequestOption) (resp *api.CreateProductResp, rawResponse *protocol.Response, err error)

	UpdateProduct(context context.Context, req *api.UpdateProductReq, reqOpt ...config.RequestOption) (resp *api.UpdateProductResp, rawResponse *protocol.Response, err error)

	DeleteProduct(context context.Context, req *api.DeleteProductReq, reqOpt ...config.RequestOption) (resp *api.DeleteProductResp, rawResponse *protocol.Response, err error)

	GetProduct(context context.Context, req *api.GetProductReq, reqOpt ...config.RequestOption) (resp *api.GetProductResp, rawResponse *protocol.Response, err error)

	GetProductList(context context.Context, req *api.GetProductListReq, reqOpt ...config.RequestOption) (resp *api.GetProductListResp, rawResponse *protocol.Response, err error)
}

type ProductServiceClient struct {
	client *cli
}

func NewProductServiceClient(hostUrl string, ops ...Option) (Client, error) {
	opts := getOptions(append(ops, withHostUrl(hostUrl))...)
	cli, err := newClient(opts)
	if err != nil {
		return nil, err
	}
	return &ProductServiceClient{
		client: cli,
	}, nil
}

func (s *ProductServiceClient) CreateProduct(context context.Context, req *api.CreateProductReq, reqOpt ...config.RequestOption) (resp *api.CreateProductResp, rawResponse *protocol.Response, err error) {
	httpResp := &api.CreateProductResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{}).
		setPathParams(map[string]string{}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/product")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *ProductServiceClient) UpdateProduct(context context.Context, req *api.UpdateProductReq, reqOpt ...config.RequestOption) (resp *api.UpdateProductResp, rawResponse *protocol.Response, err error) {
	httpResp := &api.UpdateProductResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{}).
		setPathParams(map[string]string{}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("PUT", "/product")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *ProductServiceClient) DeleteProduct(context context.Context, req *api.DeleteProductReq, reqOpt ...config.RequestOption) (resp *api.DeleteProductResp, rawResponse *protocol.Response, err error) {
	httpResp := &api.DeleteProductResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{}).
		setPathParams(map[string]string{
			"uuid": req.GetUUID(),
		}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("DELETE", "/product/:uuid")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *ProductServiceClient) GetProduct(context context.Context, req *api.GetProductReq, reqOpt ...config.RequestOption) (resp *api.GetProductResp, rawResponse *protocol.Response, err error) {
	httpResp := &api.GetProductResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{}).
		setPathParams(map[string]string{
			"uuid": req.GetUUID(),
		}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("GET", "/product/:uuid")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *ProductServiceClient) GetProductList(context context.Context, req *api.GetProductListReq, reqOpt ...config.RequestOption) (resp *api.GetProductListResp, rawResponse *protocol.Response, err error) {
	httpResp := &api.GetProductListResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"page":      req.GetPage(),
			"limit":     req.GetLimit(),
			"name":      req.GetName(),
			"min_price": req.GetMinPrice(),
			"max_price": req.GetMaxPrice(),
		}).
		setPathParams(map[string]string{}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("GET", "/product")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

var defaultClient, _ = NewProductServiceClient("")

func ConfigDefaultClient(ops ...Option) (err error) {
	defaultClient, err = NewProductServiceClient("", ops...)
	return
}

func CreateProduct(context context.Context, req *api.CreateProductReq, reqOpt ...config.RequestOption) (resp *api.CreateProductResp, rawResponse *protocol.Response, err error) {
	return defaultClient.CreateProduct(context, req, reqOpt...)
}

func UpdateProduct(context context.Context, req *api.UpdateProductReq, reqOpt ...config.RequestOption) (resp *api.UpdateProductResp, rawResponse *protocol.Response, err error) {
	return defaultClient.UpdateProduct(context, req, reqOpt...)
}

func DeleteProduct(context context.Context, req *api.DeleteProductReq, reqOpt ...config.RequestOption) (resp *api.DeleteProductResp, rawResponse *protocol.Response, err error) {
	return defaultClient.DeleteProduct(context, req, reqOpt...)
}

func GetProduct(context context.Context, req *api.GetProductReq, reqOpt ...config.RequestOption) (resp *api.GetProductResp, rawResponse *protocol.Response, err error) {
	return defaultClient.GetProduct(context, req, reqOpt...)
}

func GetProductList(context context.Context, req *api.GetProductListReq, reqOpt ...config.RequestOption) (resp *api.GetProductListResp, rawResponse *protocol.Response, err error) {
	return defaultClient.GetProductList(context, req, reqOpt...)
}
