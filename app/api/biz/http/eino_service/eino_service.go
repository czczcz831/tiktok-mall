// Code generated by hertz generator.

package eino_service

import (
	"context"
	"fmt"

	"github.com/cloudwego/hertz/pkg/common/config"
	"github.com/cloudwego/hertz/pkg/protocol"
	api "github.com/czczcz831/tiktok-mall/app/api/hertz_gen/api"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type Client interface {
	CallAssistantAgent(context context.Context, req *api.CallAssistantAgentReq, reqOpt ...config.RequestOption) (resp *api.CallAssistantAgentResp, rawResponse *protocol.Response, err error)
}

type EinoServiceClient struct {
	client *cli
}

func NewEinoServiceClient(hostUrl string, ops ...Option) (Client, error) {
	opts := getOptions(append(ops, withHostUrl(hostUrl))...)
	cli, err := newClient(opts)
	if err != nil {
		return nil, err
	}
	return &EinoServiceClient{
		client: cli,
	}, nil
}

func (s *EinoServiceClient) CallAssistantAgent(context context.Context, req *api.CallAssistantAgentReq, reqOpt ...config.RequestOption) (resp *api.CallAssistantAgentResp, rawResponse *protocol.Response, err error) {
	httpResp := &api.CallAssistantAgentResp{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{}).
		setPathParams(map[string]string{}).
		setHeaders(map[string]string{}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/eino/chat")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

var defaultClient, _ = NewEinoServiceClient("")

func ConfigDefaultClient(ops ...Option) (err error) {
	defaultClient, err = NewEinoServiceClient("", ops...)
	return
}

func CallAssistantAgent(context context.Context, req *api.CallAssistantAgentReq, reqOpt ...config.RequestOption) (resp *api.CallAssistantAgentResp, rawResponse *protocol.Response, err error) {
	return defaultClient.CallAssistantAgent(context, req, reqOpt...)
}
