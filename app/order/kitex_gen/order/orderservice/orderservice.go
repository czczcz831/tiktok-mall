// Code generated by Kitex v0.9.1. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	order "github.com/czczcz831/tiktok-mall/app/order/kitex_gen/order"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateOrder": kitex.NewMethodInfo(
		createOrderHandler,
		newOrderServiceCreateOrderArgs,
		newOrderServiceCreateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateOrderAddress": kitex.NewMethodInfo(
		updateOrderAddressHandler,
		newOrderServiceUpdateOrderAddressArgs,
		newOrderServiceUpdateOrderAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MarkOrderPaid": kitex.NewMethodInfo(
		markOrderPaidHandler,
		newOrderServiceMarkOrderPaidArgs,
		newOrderServiceMarkOrderPaidResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOrder": kitex.NewMethodInfo(
		getOrderHandler,
		newOrderServiceGetOrderArgs,
		newOrderServiceGetOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCreateOrderArgs)
	realResult := result.(*order.OrderServiceCreateOrderResult)
	success, err := handler.(order.OrderService).CreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCreateOrderArgs() interface{} {
	return order.NewOrderServiceCreateOrderArgs()
}

func newOrderServiceCreateOrderResult() interface{} {
	return order.NewOrderServiceCreateOrderResult()
}

func updateOrderAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceUpdateOrderAddressArgs)
	realResult := result.(*order.OrderServiceUpdateOrderAddressResult)
	success, err := handler.(order.OrderService).UpdateOrderAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceUpdateOrderAddressArgs() interface{} {
	return order.NewOrderServiceUpdateOrderAddressArgs()
}

func newOrderServiceUpdateOrderAddressResult() interface{} {
	return order.NewOrderServiceUpdateOrderAddressResult()
}

func markOrderPaidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceMarkOrderPaidArgs)
	realResult := result.(*order.OrderServiceMarkOrderPaidResult)
	success, err := handler.(order.OrderService).MarkOrderPaid(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceMarkOrderPaidArgs() interface{} {
	return order.NewOrderServiceMarkOrderPaidArgs()
}

func newOrderServiceMarkOrderPaidResult() interface{} {
	return order.NewOrderServiceMarkOrderPaidResult()
}

func getOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceGetOrderArgs)
	realResult := result.(*order.OrderServiceGetOrderResult)
	success, err := handler.(order.OrderService).GetOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceGetOrderArgs() interface{} {
	return order.NewOrderServiceGetOrderArgs()
}

func newOrderServiceGetOrderResult() interface{} {
	return order.NewOrderServiceGetOrderResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateOrder(ctx context.Context, req *order.CreateOrderReq) (r *order.CreateOrderResp, err error) {
	var _args order.OrderServiceCreateOrderArgs
	_args.Req = req
	var _result order.OrderServiceCreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrderAddress(ctx context.Context, req *order.UpdateOrderAddressReq) (r *order.UpdateOrderAddressResp, err error) {
	var _args order.OrderServiceUpdateOrderAddressArgs
	_args.Req = req
	var _result order.OrderServiceUpdateOrderAddressResult
	if err = p.c.Call(ctx, "UpdateOrderAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MarkOrderPaid(ctx context.Context, req *order.MarkOrderPaidReq) (r *order.MarkOrderPaidResp, err error) {
	var _args order.OrderServiceMarkOrderPaidArgs
	_args.Req = req
	var _result order.OrderServiceMarkOrderPaidResult
	if err = p.c.Call(ctx, "MarkOrderPaid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrder(ctx context.Context, req *order.GetOrderReq) (r *order.GetOrderResp, err error) {
	var _args order.OrderServiceGetOrderArgs
	_args.Req = req
	var _result order.OrderServiceGetOrderResult
	if err = p.c.Call(ctx, "GetOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
