// Code generated by Kitex v0.9.1. DO NOT EDIT.

package checkoutservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	checkout "github.com/czczcz831/tiktok-mall/app/checkout/kitex_gen/checkout"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateAddress(ctx context.Context, req *checkout.CreateAddressReq, callOptions ...callopt.Option) (r *checkout.CreateAddressResp, err error)
	UpdateAddress(ctx context.Context, req *checkout.UpdateAddressReq, callOptions ...callopt.Option) (r *checkout.UpdateAddressResp, err error)
	DeleteAddress(ctx context.Context, req *checkout.DeleteAddressReq, callOptions ...callopt.Option) (r *checkout.DeleteAddressResp, err error)
	GetAddress(ctx context.Context, req *checkout.GetAddressReq, callOptions ...callopt.Option) (r *checkout.GetAddressResp, err error)
	CreateCreditCard(ctx context.Context, req *checkout.CreateCreditCardReq, callOptions ...callopt.Option) (r *checkout.CreateCreditCardResp, err error)
	UpdateCreditCard(ctx context.Context, req *checkout.UpdateCreditCardReq, callOptions ...callopt.Option) (r *checkout.UpdateCreditCardResp, err error)
	DeleteCreditCard(ctx context.Context, req *checkout.DeleteCreditCardReq, callOptions ...callopt.Option) (r *checkout.DeleteCreditCardResp, err error)
	GetCreditCard(ctx context.Context, req *checkout.GetCreditCardReq, callOptions ...callopt.Option) (r *checkout.GetCreditCardResp, err error)
	Checkout(ctx context.Context, req *checkout.CheckoutReq, callOptions ...callopt.Option) (r *checkout.CheckoutResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kCheckoutServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kCheckoutServiceClient struct {
	*kClient
}

func (p *kCheckoutServiceClient) CreateAddress(ctx context.Context, req *checkout.CreateAddressReq, callOptions ...callopt.Option) (r *checkout.CreateAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateAddress(ctx, req)
}

func (p *kCheckoutServiceClient) UpdateAddress(ctx context.Context, req *checkout.UpdateAddressReq, callOptions ...callopt.Option) (r *checkout.UpdateAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateAddress(ctx, req)
}

func (p *kCheckoutServiceClient) DeleteAddress(ctx context.Context, req *checkout.DeleteAddressReq, callOptions ...callopt.Option) (r *checkout.DeleteAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteAddress(ctx, req)
}

func (p *kCheckoutServiceClient) GetAddress(ctx context.Context, req *checkout.GetAddressReq, callOptions ...callopt.Option) (r *checkout.GetAddressResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAddress(ctx, req)
}

func (p *kCheckoutServiceClient) CreateCreditCard(ctx context.Context, req *checkout.CreateCreditCardReq, callOptions ...callopt.Option) (r *checkout.CreateCreditCardResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCreditCard(ctx, req)
}

func (p *kCheckoutServiceClient) UpdateCreditCard(ctx context.Context, req *checkout.UpdateCreditCardReq, callOptions ...callopt.Option) (r *checkout.UpdateCreditCardResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCreditCard(ctx, req)
}

func (p *kCheckoutServiceClient) DeleteCreditCard(ctx context.Context, req *checkout.DeleteCreditCardReq, callOptions ...callopt.Option) (r *checkout.DeleteCreditCardResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCreditCard(ctx, req)
}

func (p *kCheckoutServiceClient) GetCreditCard(ctx context.Context, req *checkout.GetCreditCardReq, callOptions ...callopt.Option) (r *checkout.GetCreditCardResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCreditCard(ctx, req)
}

func (p *kCheckoutServiceClient) Checkout(ctx context.Context, req *checkout.CheckoutReq, callOptions ...callopt.Option) (r *checkout.CheckoutResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Checkout(ctx, req)
}
